 llllllllllllllllllllll Notes-Routing &Auth lllllllllllllllllllllllllllllllll
 1==================================install router-dom============
PS C:\Users\premn\Desktop\REACTWS\major-codial-app> npm i react-router-dom
 
 2=============Router added using react-router-dom==========================
 1-------------App.js----------------
 import { useEffect, useState } from 'react';
//import {BrowserRouter as Routes,Route} from 'react-router-dom'
import {Routes, Route,Switch} from 'react-router-dom';

import { getPosts } from '../api';
import {  Home ,Login } from '../pages';
import { Loader, Navbar } from './';

const About=()=>{
  return <h1>About</h1>
};

const UserInfo=()=>{
  return <h1>UserInfo</h1>
};

const Page404=()=>{
  return <h1>404</h1>
};


function App() {
  const [posts, setPosts] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchPosts = async () => {
      const response = await getPosts();

      if (response.success) {
        setPosts(response.data.posts);
      }

      setLoading(false);
    };

    fetchPosts();
  }, []);

  if (loading) {
    return <Loader />;
  }

 // console.log(posts);
  return (
    <div className="App">
      <Navbar />
      <Routes>
           <Route path="/" element={<Home posts={posts} />} />
           <Route exact path="/login" element={<Login />} />
           <Route exact path="/about" element={<About />} />
           <Route exact path="/user/info" element={<UserInfo/>} />
           <Route path="*" element={<Page404/>} />
      </Routes>
      
    </div>
  );
}

export default App;


2----------------login.js-----------------------
 const Login=()=>{
    return <h1>Login</h1>
}
export default Login;

3-------------------index.js----------------------
import Home from './Home';
import Login from './Login';

export { Home ,Login};

3=========================Navbar Link===============================
1-----------------Link----------------------------
import styles from '../styles/navbar.module.css';
import { Link } from 'react-router-dom';
const Navbar = () => {
  return (
    <div className={styles.nav}>
      <div className={styles.leftDiv}>
        <Link to="/">
          <img
            alt=""
            src="https://ninjasfiles.s3.amazonaws.com/0000000000003454.png"
          />
        </Link>
      </div>

      <div className={styles.rightNav}>
        <div className={styles.user}>
          <a href="/">
            <img
              src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQxXjYfou58DzQmbhstbtO7hZEYTfroOmEqrLtp4zTC5g&s"
              alt="Profile"
              className={styles.userDp}
            />
          </a>
          <span>Aakash</span>
        </div>

        <div className={styles.navLinks}>
          <ul>
            <li>
            <Link to="/login">Log in</Link>
            </li>
            <li>
              <Link to="/logout">Log out</Link>
            </li>
            <li>
              <Link to="/signup">Register</Link>
            </li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default Navbar;

4-====================Login page and styles=================================
1--------------------Login.js-----------------------
import styles from '../styles/login.module.css';

const Login = () => {
  return (
    <form className={styles.loginForm}>
      <span className={styles.loginSignupHeader}>Log In</span>

      <div className={styles.field}>
        <input type="email" placeholder="Email" required />
      </div>

      <div className={styles.field}>
        <input type="password" placeholder="Paasword" required />
      </div>

      <div className={styles.field}>
        <button>Log In</button>
      </div>
    </form>
  );
};

export default Login;

2--------------------login.module.css--------------------------------
.loginSignupHeader {
    font-weight: 600;
    font-size: 30px;
    color: #ef7917;
}

.loginForm {
    background-color: #fff;
    padding: 20px;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 30%;
    margin: 50px auto;
    border-radius: 6px;
    box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;
}

.field {
    width: 100%;
}

.field input {
    border: 1px solid rgba(0, 0, 0, 0.12);
    box-sizing: border-box;
    border-radius: 6px;
    width: 100%;
    height: 40px;
    margin-top: 20px;
    padding: 5px;
    font-size: 15px;
}

.field input:focus {
    outline: none;
}

.field button {
    width: 100%;
    margin-top: 20px;
    background: #ef7917;
    border-radius: 2px;
    color: #fff;
    font-size: 20px;
    padding: 9px;
    border: none;
    outline: none;
}

.field button:hover {
    cursor: pointer;
}

.field button:disabled {
    cursor: not-allowed;
}

3-------------index.css body added------------------------
body {
    margin: 0;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    background-color: #f7f9fc;
}

5=========Animated Toast using  =============================
1-----------------install react-toast-notifications---------------------
S C:\Users\premn\Desktop\REACTWS\major-codial-app> npm i  --force  react-toast-notifications

2----------------Login.js---------------------------
import { useState } from 'react';
import { useToasts } from 'react-toast-notifications';

import styles from '../styles/login.module.css';
import { login } from '../api';

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loggingIn, setLoggingIn] = useState(false);
  const { addToast } = useToasts();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoggingIn(true);

    if (!email || !password) {
      return addToast('Please enter both email and password', {
        appearance: 'error',
      });
    }

    const response = await login(email, password);

    if (response.success) {
      addToast('Successfully logged in', {
        appearance: 'success',
      });
    } else {
      addToast(response.message, {
        appearance: 'error',
      });
    }

    setLoggingIn(false);
  };

  return (
    <form className={styles.loginForm} onSubmit={handleSubmit}>
      <span className={styles.loginSignupHeader}>Log In</span>

      <div className={styles.field}>
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />
      </div>

      <div className={styles.field}>
        <input
          type="password"
          placeholder="Paasword"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
      </div>

      <div className={styles.field}>
        <button disabled={loggingIn}>
          {loggingIn ? 'Logging in...' : 'Log In'}
        </button>
      </div>
    </form>
  );
};

export default Login;

3------------------login api/index.js--------------
export const login = (email, password) => {
  return customFetch(API_URLS.login(), {
    method: 'POST',
    body: { email, password },
  });
};

4-----------------main index.js---------------------------------
import React from 'react';
import ReactDOM from 'react-dom/client';
//import reportWebVitals from './reportWebVitals';
import './styles/index.css';
import { App } from './components';
import { BrowserRouter as Router } from 'react-router-dom';
import { ToastProvider } from 'react-toast-notifications';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
     <ToastProvider autoDismiss autoDismissTimeout={5000} placement="top-left">
     <Router> <App /></Router>
    </ToastProvider>
  </React.StrictMode>
);



================================Authorization====================================
1---------------AuthProvider.js--------------------------
import { createContext } from 'react';

import { useProvideAuth } from '../hooks';

const initialState = {
  user: null,
  login: () => {},
  logout: () => {},
  loading: true,
};

export const AuthContext = createContext(initialState);

export const AuthProvider = ({ children }) => {
  const auth = useProvideAuth();

  return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;
};

2------------hooks/index.js-------------------------------
import { useContext, useState } from 'react';

import { AuthContext } from '../providers/AuthProvider';
import { login as userLogin } from '../api';
import {
  setItemInLocalStorage,
  LOCALSTORAGE_TOKEN_KEY,
  removeItemFromLocalStorage,
} from '../utils';

export const useAuth = () => {
  return useContext(AuthContext);
};

export const useProvideAuth = () => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  const login = async (email, password) => {
    const response = await userLogin(email, password);

    if (response.success) {
      setUser(response.data.user);
      setItemInLocalStorage(
        LOCALSTORAGE_TOKEN_KEY,
        response.data.token ? response.data.token : null
      );
      return {
        success: true,
      };
    } else {
      return {
        success: false,
        message: response.message,
      };
    }
  };

  const logout = () => {
    setUser(null);
    removeItemFromLocalStorage(LOCALSTORAGE_TOKEN_KEY);
  };

  return {
    user,
    login,
    logout,
    loading,
  };
};

3--------------utils/index.js------------------------------------
export * from './constants';

export const setItemInLocalStorage = (key, value) => {
  if (!key || !value) {
    return console.error('Can not store in LS');
  }

  const valueToStore =
    typeof value !== 'string' ? JSON.stringify(value) : value;

  localStorage.setItem(key, valueToStore);
};

export const getItemFromLocalStorage = (key) => {
  if (!key) {
    return console.error('Can get the value from LS');
  }

  localStorage.getItem(key);
};

export const removeItemFromLocalStorage = (value, key) => {
  if (!key) {
    return console.error('Can get the value from LS');
  }

  localStorage.removeItem(key);
};

export const getFormBody = (params) => {
  let formBody = [];

  for (let property in params) {
    let encodedKey = encodeURIComponent(property); // 'user name' => 'user%20name'
    let encodedValue = encodeURIComponent(params[property]); // aakash 123 => aakash%2020123

    formBody.push(encodedKey + '=' + encodedValue);
  }

  return formBody.join('&'); // 'username=aakash&password=123213'
};

4---------------------api/index.js--------------------------

import { API_URLS, getFormBody, LOCALSTORAGE_TOKEN_KEY } from '../utils';

const customFetch = async (url, { body, ...customConfig }) => {
  const token = window.localStorage.getItem(LOCALSTORAGE_TOKEN_KEY);

  const headers = {
    'content-type': 'application/x-www-form-urlencoded',
  };

  if (token) {
    headers.Authorization = `Bearer ${token}`;
  }

  const config = {
    ...customConfig,
    headers: {
      ...headers,
      ...customConfig.headers,
    },
  };

  if (body) {
    config.body = getFormBody(body);
  }

  try {
    const response = await fetch(url, config);
    const data = await response.json();

    if (data.success) {
      return {
        data: data.data,
        success: true,
      };
    }

    throw new Error(data.message);
  } catch (error) {
    console.error('error');
    return {
      message: error.message,
      success: false,
    };
  }
};

export const getPosts = (page = 1, limit = 5) => {
  return customFetch(API_URLS.posts(page, limit), {
    method: 'GET',
  });
};

export const login = (email, password) => {
  return customFetch(API_URLS.login(), {
    method: 'POST',
    body: { email, password },
  });
};

5-------------------Page/Login.js-------------------------
import { useState } from 'react';
import { useToasts } from 'react-toast-notifications';

import styles from '../styles/login.module.css';
import { useAuth } from '../hooks';

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loggingIn, setLoggingIn] = useState(false);
  const { addToast } = useToasts();
  const auth = useAuth();
  console.log("auth=",auth);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoggingIn(true);

    if (!email || !password) {
      return addToast('Please enter both email and password', {
        appearance: 'error',
      });
    }

    const response = await auth.login(email, password);

    if (response.success) {
      addToast('Successfully logged in', {
        appearance: 'success',
      });
    } else {
      addToast(response.message, {
        appearance: 'error',
      });
    }

    setLoggingIn(false);
  };

  return (
    <form className={styles.loginForm} onSubmit={handleSubmit}>
      <span className={styles.loginSignupHeader}>Log In</span>

      <div className={styles.field}>
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />
      </div>

      <div className={styles.field}>
        <input
          type="password"
          placeholder="Paasword"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
      </div>

      <div className={styles.field}>
        <button disabled={loggingIn}>
          {loggingIn ? 'Logging in...' : 'Log In'}
        </button>
      </div>
    </form>
  );
};

export default Login;

7-==========================jwt-decode================================
1-------------install when come error--------------------------
----Error----------------
PS C:\Users\premn\Desktop\REACTWS\major-codial-app> npm i jwt-decode                                         
npm ERR! code ERESOLVE
npm ERR! ERESOLVE could not resolve
npm ERR!

----Solution--to installed it--------------
npm install --legacy-peer-deps

----npm i jwt-decode --------- 